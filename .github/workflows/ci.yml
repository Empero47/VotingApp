name: Full Stack CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Backend Job (Spring Boot)
  backend:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    env:
      JAVA_VERSION: '17'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        id: maven-cache
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Install dependencies and run tests
        run: |
          ./mvnw clean test
          ./mvnw sonar:sonar \
            -Dsonar.host.url=${SONAR_HOST_URL} \
            -Dsonar.login=${SONAR_LOGIN} \
            -Dsonar.branch.name=${GITHUB_REF##*/}

      - name: Build Spring Boot Application
        run: ./mvnw clean package -DskipTests

      - name: Upload Test Results (JUnit)
        uses: actions/upload-artifact@v3
        with:
          name: backend-test-results
          path: target/test-classes

  # Frontend Job (React)
  frontend:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    env:
      NODE_VERSION: '18'
      CACHE_NODE_MODULES: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache Node modules
        uses: actions/cache@v3
        id: node-modules
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install frontend dependencies
        run: npm ci

      - name: Run frontend tests with Jest
        run: |
          npm test -- --coverage --ci --passWithNoTests
          npx jest-junit results.xml --output results/jest-results.xml

      - name: Build the React Application
        run: npm run build --prod

      - name: Upload Test Results (Jest)
        uses: actions/upload-artifact@v3
        with:
          name: frontend-test-results
          path: coverage

  # Deploy a job
  deploy:
    runs-on: ubuntu-latest
    needs: [ backend, frontend ]
    timeout-minutes: 90
    env:
      DEPLOYMENT_ENV: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Deploy to Production
        env:
          SERVER_URL: ${{ secrets.SERVER_URL }}
          DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          echo "Starting deployment..."
          
          # Deploy backend
          cd backend
          ./deploy-backend.sh "$SERVER_URL" "$DATABASE_URL"
          
          # Deploy frontend
          cd ../webapp
          ./deploy-frontend.sh "$SERVER_URL"

          echo "Deployment completed!"